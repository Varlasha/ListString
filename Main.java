/*Класс исключение – собственный класс
Должен контролировать передаваемые позиции в строке. Все позиции (кроме end в substring) должны быть актуальны для строки.

Проблемы, которые необходимо учитывать:
1. При вставке может возникать много блоков, с маленьким количеством символов. Проводить объединение блоков в методе length()!
2. При вставке и добавлении в конец есть другой доступ к получившейся строке (через ссылочную переменную, передаваемую как параметр). Вставлять и добавлять в конец копию. Но не создавать копию копии (когда тип передаваемого параметра String).
Общие требования:
1. В реализации должны быть класс ListString и собственный класс исключения. Все другие класс могут быть только внутренними.
2. Качество кода. Грамотное проектирование. Функциональная прочность вспомогательных методов. Оптимизация по времени и по памяти.
3. Не импортировать никаких библиотек Java и не использовать методов Java (arraycopy() и др.)! Можно использовать только методы класса String, но обоснованно.
4. Не использовать доступ по умолчанию. Указывать доступ для всего, классов, данных, методов.
5. Не использовать рекурсию.
6. Обязательно наличие в коде комментариев.
*/
public class Main {

public static void main(String[] args) {

ListString j=new ListString("Привет как дела");

System.out.println(j.charAt(6));

System.out.println(j.toString());

j.insert("хочу узнать ", 7);

System.out.println(j.toString());

j.setcharAt(18, 'з');

System.out.println(j.toString());

ListString b=j.substring(3, 20);

System.out.println(b.toString());

}

}

